// Copyright 2016 The Bazel Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package build_event_stream;

option java_package = "com.google.devtools.build.lib.buildeventstream";
option java_outer_classname = "BuildEventStreamProtos";

// Identifier for a build event. It is deliberately structured to also provide
// information about which build target etc the event is related to.
message BuildEventId {
  string opaque = 1;

  // The following parts, if present, accurately describe the part of the build
  // the event refers to.
  repeated string target_pattern = 2;
  string target = 3;
  int32 shard = 4;
  int32 run = 5;
}

// Payload of a generic event with a human-readable description.
message GenericEvent {
  string text = 1;
}

// Payload of an event summarizing the progress of the build so far. Those
// events are also used to be parents of events where the more logical parent
// event cannot be posted yet as the needed information is not yet complete.
message Progress {
}

// Payload of an event indicating that an expected event will not come, as
// the build is aborted prematurely for some reason.
message Aborted {
}

// Payload of an event indicating the beginning of a new build. Usually, events
// of those type start a new build-event stream. The target pattern requested
// to be build is contained in one of the announced child events; it is an
// invariant that precisely one of the announced child events has a non-empty
// target pattern.
message BuildStarted {
  string uuid = 1;

  // Start of the build in ms since the epoche.
  int64 start_time = 2;

  // Human-readable description
  string options_description = 3;
}

// Payload of the event indicating the expansion of a target pattern.
// The main information is in the chaining part: the id will contain the
// target pattern that was expanded and the children id will contain the
// target or target pattern it was expanded to.
message PatternExpanded {}

// Payload of the event indicating the completion of an action. The main purpose
// of posting those events is to provide details on the root cause for a target
// failing; however, consumers of the build-event stream should not assume that
// only failed actions are posted.
message ActionExecuted {
  bool success = 1;

  // Location where to find the standard output of the action
  // (e.g., a file path).
  string stdout = 2;

  // Location where to find the standard error of the action
  // (e.g., a file path).
  string stderr = 3;
}

// Payload of the event indicating the completion of a target. The target is
// specified in the id. If the target failed the root causes are provided as
// children events.
message TargetComplete {
  bool success = 1;
}

// Payload of the event summarizing a test.
message TestSummary {
  // Total number of runs
  int32 num_total = 1;

  // Number of results that were cached.
  int32 num_cached = 2;

  // Path to logs of passed runs.
  repeated string passed = 3;

  // Path to logs of failed runs;
  repeated string failed = 4;
}

// Payload for the result of a single run a test.
// TODO(aehlig): instead include TestResultData
// from //src/main/protobuf:test_status_java_proto?
message TestResult {
  bool test_passed = 2;
}

// Message describing a build event. Events will have an identifier that
// is unique within a given build invocation; they also announce follow-up
// events as children. More details, which are specific to the kind of event
// that is observed, is provided in the payload. More options for the payload
// might be added in the future.
message BuildEvent {
  BuildEventId id = 1;
  repeated BuildEventId children = 2;
  oneof payload {
    GenericEvent generic = 3;
    Aborted aborted = 4;
    Progress progress = 5;
    BuildStarted started = 6;
    PatternExpanded expanded = 7;
    ActionExecuted action = 8;
    TargetComplete completed = 9;
    TestSummary test_summary = 10;
    TestResult test_result = 11;
  };
}
